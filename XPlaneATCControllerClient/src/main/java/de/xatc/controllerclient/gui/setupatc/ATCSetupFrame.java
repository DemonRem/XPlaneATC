package de.xatc.controllerclient.gui.setupatc;

import de.mytools.tools.swing.SwingTools;
import de.xatc.commons.db.sharedentities.atcdata.AirportStation;
import de.xatc.commons.db.sharedentities.atcdata.Fir;
import de.xatc.commons.db.sharedentities.atcdata.PlainAirport;
import de.xatc.commons.networkpackets.atc.stations.SupportedStationStatistics;
import de.xatc.commons.networkpackets.atc.stations.SupportedFirStation;
import de.xatc.controllerclient.config.XHSConfig;
import de.xatc.controllerclient.db.DBSessionManager;
import de.xatc.controllerclient.navigation.NavPointHelpers;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import javax.swing.JSlider;
import org.apache.commons.lang.StringUtils;
import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;

/**
 *
 * @author Mirko
 */
public class ATCSetupFrame extends javax.swing.JFrame {

    private Map<String, Integer> firSearchStrings = new HashMap<>();
    private DefaultListModel<Fir> originalFirModel = new DefaultListModel<>();
    private DefaultListModel<PlainAirport> originalAirportModel = new DefaultListModel<>();
    private Map<String, Integer> airportSearchStrings = new HashMap();
    private DefaultListModel selectedStationsModel = new DefaultListModel();

    /**
     * Creates new form ATCSetupFrame
     */
    public ATCSetupFrame() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        firJList = new javax.swing.JList<Fir>();
        showIncludedAirportsCheckbox = new javax.swing.JCheckBox();
        searchFirField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        airportJList = new javax.swing.JList<>();
        airportSearchString = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        firMessageArea = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        selectedJList = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        airportFreqJList = new javax.swing.JList<>();
        jLabel5 = new javax.swing.JLabel();
        customStationCheckbox = new javax.swing.JCheckBox();
        customStationFreqField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        customStationName = new javax.swing.JTextField();
        jScrollPane6 = new javax.swing.JScrollPane();
        airportATISField = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        firSelectButton = new javax.swing.JButton();
        firClearButton = new javax.swing.JButton();
        airportSelectButton = new javax.swing.JButton();
        airportClearButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        airportRangeSlider = new javax.swing.JSlider();
        jLabel10 = new javax.swing.JLabel();
        resetAllButton = new javax.swing.JButton();
        submitButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        firFrequencyField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        airportATISFrequencyField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        rangeValueField = new javax.swing.JLabel();
        atcSetupMapPanel = new de.xatc.controllerclient.gui.setupatc.ATCSetupMapPanel();
        saveSetupButton = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        setupSaveNameField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 11)); // NOI18N
        jLabel1.setText("Setup ATC Airports and Freqs");

        firJList.setModel(loadFirs());
        firJList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        firJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                firJListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(firJList);

        showIncludedAirportsCheckbox.setText("show included Airports");
        showIncludedAirportsCheckbox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                showIncludedAirportsCheckboxItemStateChanged(evt);
            }
        });

        searchFirField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchFirFieldKeyTyped(evt);
            }
        });

        jLabel2.setText("Search:");

        airportJList.setModel(loadAirports());
        airportJList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        airportJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                airportJListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(airportJList);

        airportSearchString.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                airportSearchStringKeyTyped(evt);
            }
        });

        jLabel3.setText("Search:");

        firMessageArea.setColumns(20);
        firMessageArea.setRows(5);
        jScrollPane3.setViewportView(firMessageArea);

        selectedJList.setModel(this.selectedStationsModel);
        selectedJList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane4.setViewportView(selectedJList);

        jLabel4.setText("Selected");

        airportFreqJList.setModel(new DefaultListModel());
        airportFreqJList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        airportFreqJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                airportFreqJListValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(airportFreqJList);

        jLabel5.setText("Airport Stations");

        customStationCheckbox.setText("Custom Station");
        customStationCheckbox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                customStationCheckboxItemStateChanged(evt);
            }
        });

        customStationFreqField.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        customStationFreqField.setEnabled(false);

        jLabel6.setText("Frequency");

        jLabel7.setText("Station Name");

        customStationName.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        customStationName.setEnabled(false);

        airportATISField.setColumns(20);
        airportATISField.setRows(5);
        jScrollPane6.setViewportView(airportATISField);

        jLabel8.setText("Airport ATIS Message");

        firSelectButton.setText("select");
        firSelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firSelectButtonActionPerformed(evt);
            }
        });

        firClearButton.setText("clear");

        airportSelectButton.setText("select");
        airportSelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                airportSelectButtonActionPerformed(evt);
            }
        });

        airportClearButton.setText("clear");

        jLabel9.setText("Fir Messge");

        airportRangeSlider.setMajorTickSpacing(1);
        airportRangeSlider.setMaximum(XHSConfig.getMaxAirportVisRange());
        airportRangeSlider.setMinimum(XHSConfig.getMinAirportVisRange());
        airportRangeSlider.setSnapToTicks(true);
        airportRangeSlider.setValueIsAdjusting(true);
        airportRangeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                airportRangeSliderStateChanged(evt);
            }
        });

        jLabel10.setText("Visibility Range (nm)");

        resetAllButton.setText("reset all");
        resetAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetAllButtonActionPerformed(evt);
            }
        });

        submitButton.setText("submit and register ATC");

        jButton1.setText("remove");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel11.setText("Fir Frequency");

        jLabel12.setText("Airport ATIS Freq");

        jLabel13.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel13.setText("Frequency must be defined in the format xxx.xx, three digits a dot and two digits for decimals.");

        rangeValueField.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rangeValueField.setText("60 nm");

        saveSetupButton.setText("save setup for later usage");

        jLabel14.setText("Setup name:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(16, 16, 16)
                                                .addComponent(searchFirField, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(showIncludedAirportsCheckbox)
                                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel11)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(firFrequencyField, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jButton1)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(firSelectButton)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(firClearButton)))
                                        .addGap(307, 307, 307)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(submitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(resetAllButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(atcSetupMapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(setupSaveNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(saveSetupButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(airportSearchString, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jScrollPane2)
                                        .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(customStationCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jScrollPane6)
                                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                .addComponent(jLabel12))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(customStationFreqField)
                                                .addComponent(customStationName)
                                                .addComponent(airportATISFrequencyField)))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(rangeValueField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(airportRangeSlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(airportSelectButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(airportClearButton)
                                        .addGap(288, 288, 288)))))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(airportSearchString, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5)
                                .addGap(136, 136, 136)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(firFrequencyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(searchFirField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(showIncludedAirportsCheckbox)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(286, 286, 286)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(customStationCheckbox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(customStationFreqField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(customStationName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel12)
                                            .addComponent(airportATISFrequencyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(resetAllButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(submitButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(36, 36, 36)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel14)
                                            .addComponent(setupSaveNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(saveSetupButton)
                                    .addComponent(airportRangeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(atcSetupMapPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 465, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firSelectButton)
                    .addComponent(firClearButton)
                    .addComponent(airportSelectButton)
                    .addComponent(airportClearButton)
                    .addComponent(rangeValueField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        XHSConfig.setAtcSetupFrame(null);
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    private void firJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_firJListValueChanged

        if (evt.getValueIsAdjusting()) {

            List<Fir> firList = new ArrayList<>();
            List<PlainAirport> airports = new ArrayList<>();
            for (int i : firJList.getSelectedIndices()) {

                Fir fir = firJList.getModel().getElementAt(i);
                firList.add(fir);
                if (this.showIncludedAirportsCheckbox.isSelected()) {
                    airports.addAll(fir.getIncludedAirports());
                }

            }
            this.atcSetupMapPanel.getFirPainter().setFirList(firList);
            this.atcSetupMapPanel.getFirPainter().setAirports(airports);
            this.atcSetupMapPanel.revalidate();
            this.atcSetupMapPanel.repaint();
        }


    }//GEN-LAST:event_firJListValueChanged

    private void searchFirFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchFirFieldKeyTyped

        System.out.println(evt.getKeyChar());
        if (StringUtils.isEmpty(this.searchFirField.getText())) {
            this.firJList.setModel(originalFirModel);
            return;
        }
        DefaultListModel newModel = new DefaultListModel();
        for (Entry<String, Integer> entry : this.firSearchStrings.entrySet()) {

            Pattern searchpattern = Pattern.compile(".*" + this.searchFirField.getText() + ".*", Pattern.CASE_INSENSITIVE);
            Matcher searchmatcher = searchpattern.matcher(entry.getKey());
            if (searchmatcher.matches()) {
                Fir fir = (Fir) originalFirModel.getElementAt(entry.getValue());
                newModel.addElement(fir);
            }

        }
        firJList.setModel(newModel);

    }//GEN-LAST:event_searchFirFieldKeyTyped

    private void airportSearchStringKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_airportSearchStringKeyTyped
        System.out.println(evt.getKeyChar());
        if (StringUtils.isEmpty(this.airportSearchString.getText())) {
            this.airportJList.setModel(originalAirportModel);
            return;
        }
        DefaultListModel newModel = new DefaultListModel();
        for (Entry<String, Integer> entry : this.airportSearchStrings.entrySet()) {

            Pattern searchpattern = Pattern.compile(".*" + this.airportSearchString.getText() + ".*", Pattern.CASE_INSENSITIVE);
            Matcher searchmatcher = searchpattern.matcher(entry.getKey());
            if (searchmatcher.matches()) {
                PlainAirport airport = (PlainAirport) originalAirportModel.getElementAt(entry.getValue());
                newModel.addElement(airport);
            }

        }
        airportJList.setModel(newModel);
    }//GEN-LAST:event_airportSearchStringKeyTyped

    private void airportJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_airportJListValueChanged

        if (evt.getValueIsAdjusting()) {
            this.airportATISFrequencyField.setText("");
            List<String> criteriaStrings = new ArrayList<>();
            List<PlainAirport> airportList = new ArrayList<>();
            for (int i : airportJList.getSelectedIndices()) {

                PlainAirport airport = airportJList.getModel().getElementAt(i);
                airportList.add(airport);
                criteriaStrings.add(airport.getAirportIcao());

            }
            
            List<AirportStation> airportStationList = airportJList.getSelectedValue().getAirportStations();
            
            DefaultListModel<AirportStation> model = new DefaultListModel();
            for (AirportStation station : airportStationList) {

                System.out.println(station.getStationName());
                if (station.getStationName().matches("(?i:.*ATIS.*)")) {
                    this.airportATISFrequencyField.setText(station.getFrequency());
                    continue;
                }
                model.addElement(station);
            }
            this.airportFreqJList.setModel(model);
            this.atcSetupMapPanel.getFirPainter().setAirports(airportList);
            this.atcSetupMapPanel.getFirPainter().setAiportRange(this.airportRangeSlider.getValue() * XHSConfig.getMetersPerNauticalMile());
            this.atcSetupMapPanel.revalidate();
            this.atcSetupMapPanel.repaint();

        }


    }//GEN-LAST:event_airportJListValueChanged

    private void firSelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firSelectButtonActionPerformed
        if (this.firJList.getSelectedIndices().length == 0) {
            SwingTools.alertWindow("No Fir selected!", this);
            return;

        }

        if (StringUtils.isEmpty(this.firMessageArea.getText())) {
            SwingTools.alertWindow("No Fir Message found!", this);
            return;
        }

        if (StringUtils.isEmpty(this.firFrequencyField.getText())) {
            SwingTools.alertWindow("No Frequency found!", this);
            return;
        }
        if (!NavPointHelpers.isFrequencyStringValid(this.firFrequencyField.getText())) {
            SwingTools.alertWindow("Entered FIR Frequency is not valid!", this);
            return;

        }
        if (this.firFrequencyField.getText().equals("122.800")) {
            SwingTools.alertWindow("Entered FIR Frequency is the unicom Freq! Not valid!", this);
            return;
        }
        if (this.firFrequencyField.getText().equals("122.80")) {
            SwingTools.alertWindow("Entered FIR Frequency is the unicom Freq! Not valid!", this);
            return;
        }

        SupportedFirStation station = new SupportedFirStation();
        station.setFir(this.firJList.getSelectedValue());
        station.setFrequency(this.firFrequencyField.getText());
        station.setFirMessage(this.firMessageArea.getText());
        station.setActive(true);
        this.firMessageArea.setText("");
        this.firFrequencyField.setText("");
        this.firJList.clearSelection();
        this.atcSetupMapPanel.getFirPainter().getFirList().clear();
        this.atcSetupMapPanel.getFirPainter().getAirports().clear();
        this.atcSetupMapPanel.revalidate();
        this.atcSetupMapPanel.repaint();
        this.selectedStationsModel.addElement(station);
        this.selectedJList.repaint();

    }//GEN-LAST:event_firSelectButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (this.selectedJList.getSelectedIndices().length == 0) {
            SwingTools.alertWindow("No Item selected!", this);
        }
        Object o = this.selectedJList.getSelectedValue();
        this.selectedStationsModel.removeElement(o);
        this.selectedJList.repaint();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void showIncludedAirportsCheckboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_showIncludedAirportsCheckboxItemStateChanged

        if (this.firJList.getSelectedIndices().length == 0) {
            System.out.println("No Fir selected");
            return;
        }
        if (evt.getStateChange() == ItemEvent.SELECTED) {

            int selectedIndex = this.firJList.getSelectedIndex();
            System.out.println("Checkbox Value selected!");

            System.out.println("FIR SELECTED: " + this.firJList.getModel().getElementAt(selectedIndex));
            this.atcSetupMapPanel.getFirPainter().setAirports(this.firJList.getModel().getElementAt(selectedIndex).getIncludedAirports());
            System.out.println("Selected Airports: " + this.firJList.getModel().getElementAt(selectedIndex).getIncludedAirports().size());
            this.atcSetupMapPanel.revalidate();
            this.atcSetupMapPanel.repaint();
        } else {
            System.out.println("Checkbox Value unselected");
            this.atcSetupMapPanel.getFirPainter().resetAirports();
            this.atcSetupMapPanel.revalidate();
            this.atcSetupMapPanel.repaint();
        }


    }//GEN-LAST:event_showIncludedAirportsCheckboxItemStateChanged

    private void resetAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetAllButtonActionPerformed
        this.atcSetupMapPanel.getFirPainter().resetAirports();
        this.atcSetupMapPanel.getFirPainter().getFirList().clear();
        this.atcSetupMapPanel.revalidate();
        this.atcSetupMapPanel.repaint();
        this.selectedJList.setModel(new DefaultListModel());
        this.showIncludedAirportsCheckbox.setSelected(false);
        this.airportJList.clearSelection();
        this.firJList.clearSelection();
        this.firFrequencyField.setText("");
        this.firMessageArea.setText("");
        this.airportATISField.setText("");
        this.airportFreqJList.setModel(new DefaultListModel());
        this.airportRangeSlider.setValue(this.airportRangeSlider.getMinimum());
        this.customStationCheckbox.setSelected(false);
        this.customStationFreqField.setText("");
        this.customStationName.setText("");
        this.customStationFreqField.setEditable(false);
        this.customStationName.setEnabled(false);
    }//GEN-LAST:event_resetAllButtonActionPerformed

    private void customStationCheckboxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_customStationCheckboxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            this.customStationFreqField.setEnabled(true);
            this.customStationName.setEnabled(true);
            this.customStationFreqField.setText("");
            this.customStationName.setText("");
            this.airportFreqJList.clearSelection();

        } else {
            this.customStationFreqField.setEnabled(false);
            this.customStationName.setEnabled(false);
            this.customStationFreqField.setText("");
            this.customStationName.setText("");
        }


    }//GEN-LAST:event_customStationCheckboxItemStateChanged

    private void airportRangeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_airportRangeSliderStateChanged

        JSlider s = (JSlider) evt.getSource();
        this.rangeValueField.setText(s.getValue() + " nm");

        //calc nm from slider to meters
        double sliderNM = s.getValue() * XHSConfig.getMetersPerNauticalMile();
        System.out.println("SLIDER METERS: " + sliderNM);
        this.atcSetupMapPanel.getFirPainter().setAiportRange(sliderNM);
        this.atcSetupMapPanel.revalidate();
        this.atcSetupMapPanel.repaint();


    }//GEN-LAST:event_airportRangeSliderStateChanged

    private void airportSelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_airportSelectButtonActionPerformed

        if (this.airportJList.getSelectedIndices().length == 0) {
            SwingTools.alertWindow("No Airport selected", this);
            return;
        }
        if (this.airportFreqJList.getSelectedIndices().length == 0) {
            if (!this.customStationCheckbox.isSelected()) {
                SwingTools.alertWindow("No Station selected and no custom station added", this);
                return;
            }
            if (StringUtils.isEmpty(this.customStationFreqField.getText())) {
                SwingTools.alertWindow("No custom frequency entered!", this);
                return;
            }
            if (StringUtils.isEmpty(this.customStationName.getText())) {
                SwingTools.alertWindow("No custom station name entered!", this);
                return;
            }
        }
        if (StringUtils.isEmpty(this.airportATISField.getText())) {
            SwingTools.alertWindow("No ATIS Message entered!", this);
            return;
        }
        if (StringUtils.isEmpty(this.airportATISFrequencyField.getText())) {
            SwingTools.alertWindow("No ATIS Frequency entered", this);
        } else {
            if (this.airportATISFrequencyField.getText().equals("122.800")) {
                SwingTools.alertWindow("ATIS Frequency is equal to unicom frequency. Not valid!", this);
                return;
            }
            if (this.airportATISFrequencyField.getText().equals("122.80")) {
                SwingTools.alertWindow("ATIS Frequency is equal to unicom frequency. Not valid!", this);
                return;
            }

            if (!NavPointHelpers.isFrequencyStringValid(this.airportATISFrequencyField.getText())) {
                SwingTools.alertWindow("Entered ATIS Frequency is not valid. Format must be xxx.xxx or xxx.xx!", this);
                return;
            }
        }

        //TODO
        //verdammte hacke, so richtig funktioniert das hier auch nicht. Ich glaube, ich muss die Objekte Supported Airport Stations und ATIS
        //        voneinander trennen.
                
        SupportedStationStatistics supAirportStation = new SupportedStationStatistics();
        supAirportStation.setActive(true);
      //  supAirportStation.setAirport(this.airportJList.getSelectedValue());
      //  supAirportStation.setAtisMessage(this.airportATISField.getText());
        if (this.customStationCheckbox.isSelected()) {
            supAirportStation.setFrequency(this.customStationFreqField.getText());
            supAirportStation.setStationName(this.customStationName.getText());
        } else {
            supAirportStation.setFrequency(this.airportFreqJList.getSelectedValue().getFrequency());
            supAirportStation.setStationName(this.airportFreqJList.getSelectedValue().getStationName());
        }
        supAirportStation.setRange(this.airportRangeSlider.getValue());
        this.selectedStationsModel.addElement(supAirportStation);

    }//GEN-LAST:event_airportSelectButtonActionPerformed

    private void airportFreqJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_airportFreqJListValueChanged

        if (evt.getValueIsAdjusting()) {
        System.out.println("FREQLIST CHANGED");
        AirportStation station = this.airportFreqJList.getSelectedValue();
        this.customStationName.setText(station.getStationName());
        this.customStationFreqField.setText(station.getFrequency());
        System.out.println(station.getStationName());
        }
        
        
    }//GEN-LAST:event_airportFreqJListValueChanged



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea airportATISField;
    private javax.swing.JTextField airportATISFrequencyField;
    private javax.swing.JButton airportClearButton;
    private javax.swing.JList<AirportStation> airportFreqJList;
    private javax.swing.JList<PlainAirport> airportJList;
    private javax.swing.JSlider airportRangeSlider;
    private javax.swing.JTextField airportSearchString;
    private javax.swing.JButton airportSelectButton;
    private de.xatc.controllerclient.gui.setupatc.ATCSetupMapPanel atcSetupMapPanel;
    private javax.swing.JCheckBox customStationCheckbox;
    private javax.swing.JTextField customStationFreqField;
    private javax.swing.JTextField customStationName;
    private javax.swing.JButton firClearButton;
    private javax.swing.JTextField firFrequencyField;
    private javax.swing.JList<Fir> firJList;
    private javax.swing.JTextArea firMessageArea;
    private javax.swing.JButton firSelectButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel rangeValueField;
    private javax.swing.JButton resetAllButton;
    private javax.swing.JButton saveSetupButton;
    private javax.swing.JTextField searchFirField;
    private javax.swing.JList<Object> selectedJList;
    private javax.swing.JTextField setupSaveNameField;
    private javax.swing.JCheckBox showIncludedAirportsCheckbox;
    private javax.swing.JButton submitButton;
    // End of variables declaration//GEN-END:variables

    private DefaultListModel<Fir> loadFirs() {

        DefaultListModel model = new DefaultListModel();
        Session s = DBSessionManager.getSession();
        List<Fir> firList = s.createCriteria(Fir.class).addOrder(Order.asc("countryCode")).addOrder(Order.asc("firNameIcao")).list();
        int counter = 0;
        for (Fir fir : firList) {

            model.addElement(fir);
            this.firSearchStrings.put(fir.toString(), counter);
            counter++;
        }

        this.originalFirModel = model;

        return model;
    }

    private DefaultListModel<PlainAirport> loadAirports() {

        DefaultListModel model = new DefaultListModel();
        Session s = DBSessionManager.getSession();
        List<PlainAirport> airportList = s.createCriteria(PlainAirport.class).addOrder(Order.asc("airportIcao")).list();
        System.out.println("Found airports to select: " + airportList.size());
        int counter = 0;
        for (PlainAirport airport : airportList) {

            model.addElement(airport);
            this.airportSearchStrings.put(airport.toString(), counter);
            counter++;
        }

        this.originalAirportModel = model;

        return model;
    }
}
